buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.maiflai:gradle-scalatest:0.10"
    }
}

allprojects {
    apply plugin: "scala"
    apply plugin: "com.github.maiflai.scalatest"
    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    group = group
    archivesBaseName = name
    version = "${influxVersion}.${reactiveInfluxVersion}"

    targetCompatibility = "1.7"

    repositories {
        mavenCentral()
        maven { url "http://dl.bintray.com/typesafe/maven-releases/" }
    }

    configurations {
        itestCompile.extendsFrom testCompile
        itestRuntime.extendsFrom testRuntime
        deployerJars
    }

    sourceSets {
        itest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            scala.srcDir file("src/itest/scala")
        }

        test {
            resources.srcDir file("src/itest/resources")
        }
    }

    task itest(type: Test) {
        testClassesDir = sourceSets.itest.output.classesDir
        classpath = sourceSets.itest.runtimeClasspath

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    dependencies {
        compile "org.scala-lang:scala-library:$scalaVersion.6"
        compile "com.typesafe.play:play-ws_$scalaVersion:2.3.10"
        compile "ch.qos.logback:logback-classic:1.1.3"
        compile "joda-time:joda-time:2.9.2"
        compile "org.joda:joda-convert:1.8.1"

        testCompile "org.scalatest:scalatest_$scalaVersion:2.2.6"
        testCompile "org.mockito:mockito-all:1.10.19"
        testCompile "junit:junit:4.12"
        testCompile "org.pegdown:pegdown:1.6.0"

        deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2"
    }
}

project(":examples") {
    dependencies {
        compile rootProject
    }
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar (type: Jar) {
    classifier = "javadoc"
    from javadoc
}

publishing {
    publications {
        mavenScala(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name "ReactiveInflux"
                    description "Non-blocking, reactive InfluxDB driver for Scala and Java."
                    url "https://github.com/pygmalios/reactiveinflux"
                    scm {
                        url "https://github.com/pygmalios/reactiveinflux"
                        connection "https://github.com/pygmalios/reactiveinflux"
                        developerConnection "http://buransky.com/"
                    }
                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/license/LICENSE-2.0.txt"
                            distribution "repo"
                        }
                    }
                    developers {
                        developer {
                            id "radoburansky"
                            name "Rado Buransky"
                            email "rado@buransky.com"
                        }
                    }
                }
            }

            artifact (sourceJar) {
                classifier = "sources"
            }

            artifact (javadocJar) {
                classifier = "javadoc"
            }
        }
    }
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

//signing {
//    sign configurations.archives
//}

//task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {
//    sign configurations.archives
//}
//
//// call signJar task before publish task
//task preparePublish(dependsOn: signJar)
//
//// extract signature file and give them proper name
//def getSignatureFiles = {
//    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
//    def signedSources = allFiles.find { it.name.contains('-sources') }
//    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
//    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
//    return [
//            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
//            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
//            [archive: signedJar,     classifier: null,      extension: 'jar.asc']
//    ]
//}

//publishing {
//    publications {
//        signatures (MavenPublication) {
//            // give signature files to rtifact method
//            getSignatureFiles().each {signature ->
//                artifact (signature.archive) {
//                    classifier = signature.classifier
//                    extension  = signature.extension
//                }
//            }
//        }
//    }
//}

uploadArchives {
    def mavenRepoURL = (version.endsWith("-SNAPSHOT")) ?
            "$System.env.MAVEN_REPO_SNAPSHOT_URL" : "$System.env.MAVEN_REPO_RELEASE_URL"

    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "dav:$mavenRepoURL") {
                authentication(userName: "$System.env.MAVEN_REPO_USERNAME", password: "$System.env.MAVEN_REPO_PASSWORD")
            }
        }
    }
}

task uploadToSonatype(type: Upload) {
    configuration = configurations.archives
    uploadDescriptor = true

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name "ReactiveInflux"
                packaging "jar"

                description "Non-blocking, reactive InfluxDB driver for Scala and Java."
                url "https://github.com/pygmalios/reactiveinflux"

                scm {
                    connection "scm:git:https://github.com/pygmalios/reactiveinflux.git"
                    developerConnection "scm:git:https://github.com/pygmalios/reactiveinflux.git"
                    url "https://github.com/pygmalios/reactiveinflux"
                }

                licenses {
                    license {
                        name "The Apache License, Version 2.0"
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id "radoburansky"
                        name "Rado Buransky"
                        email "rado@buransky.com"
                    }
                }
            }
        }
    }
}